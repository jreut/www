#!/usr/bin/env node
// vim:ft=javascript

var fs = require('fs');
var path = require('path');
var spawn = require('child_process').spawn;
var util = require('util');
var log = util.debuglog('journal');

var rm = require('rimraf');

var src = process.env.JOURNAL_PATH;
var dest = path.join('.', 'src', 'journal');

if (src === '') {
  log('I require JOURNAL_PATH to be set');
  process.exit(16);
}

log('Using JOURNAL_PATH=%s', src);

var cleanDir = new Promise(function(resolve, reject) {
  rm(dest, function(err) {
    if (err) { reject(err); }
    fs.mkdir(dest, function(err) {
      if (err) { reject(err); }
      resolve();
    });
  });
});

var filterFiles = function(sourceDir) {
  return function() {
    return new Promise(function(resolve, reject) {
      fs.readdir(sourceDir, function(err, files) {
        if (err) { reject(err); }
        resolve(files
            .map(function(e) { return e.match(/^(.+)\.m(ark)?d(own)?$/); })
            .filter(function(e) { return e; }));
      });
    });
  };
};

var writeFiles = function(fileMatches) {
  fileMatches.forEach(function(match) {
    var infile = path.join(src, match[0]);
    var outpath = path.join(dest, match[1].concat('.html'));
    fs.open(outpath, 'wx', function(err, fd) {
      if (err) { throw err; }
      log('Writing %s -> %s (%s)', infile, outpath, file.id);
      spawn('pandoc',
        [
          '--to', 'html5',
          '--smart',
          '--standalone',
          '--section-divs',
          // '--css=/compiled.css',
          '--title-prefix=jreut',
          infile
        ],
        { stdio: [null, fd, null] });
      fs.close(fd);
    });
  });
};

var bail = function(err) {
  log(err);
  process.exit(2);
};

cleanDir.then(filterFiles(src)).then(writeFiles).catch(bail);
