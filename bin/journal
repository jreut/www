#!/usr/bin/env node
// vim:ft=javascript

const fs = require('fs');
const path = require('path');
const spawn = require('child_process').spawn;
const util = require('util');
const log = util.debuglog('journal');

const rm = require('rimraf');
const uuid = require('uuid').v4;

const src = process.env.JOURNAL_PATH;
const dest = path.join('.', 'src', 'journal');

if (src === '') {
  log('I require JOURNAL_PATH to be set');
  process.exit(16);
}

log('Using JOURNAL_PATH=%s', src);

const cleanDir = new Promise((resolve, reject) => {
  rm(dest, (err) => {
    if (err) { reject(err); }
    fs.mkdir(dest, (err) => {
      if (err) { reject(err); }
      resolve();
    });
  });
});

const filterFiles = (sourceDir) => {
  return () => {
    return new Promise((resolve, reject) => {
      fs.readdir(sourceDir, (err, files) => {
        if (err) { reject(err); }
        resolve(files
          .map((e) => e.match(/^(.+)\.m(ark)?d(own)?$/))
          .filter((e) => !!e)
          .map((e) => ({
            all: e[0],
            basename: e[1],
            id: uuid()
          }))
        );
      });
    });
  };
};

const writeTableOfContents = (files) => {
  let makeLink = (name, href) => util.format('<a href="/journal/%s">%s</a>', href, name);
  let links = files.map((file) => makeLink(file.basename, file.id));
  log(links.join('\n'));
  let html = `
  <!doctype html>
  <html>
  <head>
    <title>Table of Contents</title>
  </head>
  <body>
    ${links.join('\n')}
  </body>
  </html>`;
  fs.writeFileSync(path.join(dest, 'index.html'), html);
};

const writeFiles = (files) => {
  files.forEach((file) => {
    let infile = path.join(src, file.all);
    let outpath = path.join(dest, file.basename.concat('.html'));
    fs.open(outpath, 'wx', (err, fd) => {
      if (err) { throw err; }
      log('Writing %s -> %s (%s)', infile, outpath, file.id);
      spawn('pandoc',
        [
          '--to', 'html5',
          '--smart',
          '--standalone',
          '--section-divs',
          // '--css=/compiled.css',
          '--title-prefix=jreut',
          infile
        ],
        { stdio: [null, fd, null] });
      fs.close(fd);
    });
  });
};

const bail = (err) => {
  log(err);
  process.exit(2);
};

cleanDir.then(filterFiles(src)).then((files) => {
  writeTableOfContents(files);
  writeFiles(files);
}).catch(bail);
